{"version":3,"sources":["CartItem.js","Cart.js","App.js","serviceWorker.js","index.js"],"names":["CartItem","id","name","price","qty","updateQty","className","onClick","disabled","Cart","items","useState","item","setItem","newQty","newItems","map","grandTotal","reduce","total","toFixed","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2SA0BeA,MAvBf,YAAwD,IAApCC,EAAmC,EAAnCA,GAAIC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,IAAKC,EAAa,EAAbA,UAOtC,OACI,wBAAIC,UAAU,YACV,6BAAMJ,GACN,iCAAOC,GACP,6BACI,4BAAQI,QARA,WAChBF,EAAUJ,EAAIG,EAAM,IAOkBI,SAAUJ,GAAO,GAA/C,KAGA,2BAAIA,GACJ,4BAAQG,QAfL,WACXF,EAAUJ,EAAIG,EAAM,KAcZ,MAEJ,wCAAcD,EAAQC,K,MCSnBK,MA1Bf,YAA0B,IAAVC,EAAS,EAATA,MAAS,EACGC,mBAASD,GADZ,mBACdE,EADc,KACRC,EADQ,KAEfR,EAAY,SAACJ,EAAIa,GACnB,IAAMC,EAAWH,EAAKI,KAAI,SAACJ,GACvB,OAAIA,EAAKX,KAAOA,EACL,2BAAKW,GAAZ,IAAkBR,IAAKU,IAEpBF,KAEXC,EAAQE,IAENE,EAAaL,EAAKM,QAAO,SAACC,EAAOP,GAAR,OAAiBO,EAAQP,EAAKR,IAAMQ,EAAKT,QAAO,GAAGiB,QAAQ,GAE1F,OACI,yBAAKd,UAAU,QACX,6CACA,wBAAIA,UAAU,cACTM,EAAKI,KAAI,SAACJ,GAAD,OACN,kBAAC,EAAD,eAAUS,IAAKT,EAAKX,IAAQW,EAA5B,CAAkCP,UAAWA,SAGrD,6CAAmBY,KCrBzBP,G,MAAQ,CACV,CAAET,GAAI,EAAGC,KAAM,iBAAkBC,MAAO,KAAMC,IAAK,GACnD,CAAEH,GAAI,EAAGC,KAAM,cAAeC,MAAO,KAAMC,IAAK,GAChD,CAAEH,GAAI,EAAGC,KAAM,aAAcC,MAAO,IAAKC,IAAK,KAWnCkB,MARf,WACI,OACI,6BACI,kBAAC,EAAD,CAAMZ,MAAOA,MCDLa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.66a0c02d.chunk.js","sourcesContent":["import React from 'react';\r\nimport './CartItem.css';\r\n\r\nfunction CartItem({ id, name, price, qty, updateQty }) {\r\n    const addOne = () => {\r\n        updateQty(id, qty + 1);\r\n    };\r\n    const subtractOne = () => {\r\n        updateQty(id, qty - 1);\r\n    };\r\n    return (\r\n        <li className=\"CartItem\">\r\n            <div>{name}</div>\r\n            <div>${price}</div>\r\n            <div>\r\n                <button onClick={subtractOne} disabled={qty <= 1}>\r\n                    -\r\n                </button>\r\n                <p>{qty}</p>\r\n                <button onClick={addOne}>+</button>\r\n            </div>\r\n            <div>Total: ${price * qty}</div>\r\n        </li>\r\n    );\r\n}\r\n\r\nexport default CartItem;\r\n","import React, { useState } from 'react';\r\nimport CartItem from './CartItem';\r\nimport './Cart.css';\r\n\r\nfunction Cart({ items }) {\r\n    const [item, setItem] = useState(items);\r\n    const updateQty = (id, newQty) => {\r\n        const newItems = item.map((item) => {\r\n            if (item.id === id) {\r\n                return { ...item, qty: newQty };\r\n            }\r\n            return item;\r\n        });\r\n        setItem(newItems);\r\n    };\r\n    const grandTotal = item.reduce((total, item) => total + item.qty * item.price, 0).toFixed(2);\r\n\r\n    return (\r\n        <div className=\"Cart\">\r\n            <h1>Shopping Cart</h1>\r\n            <ul className=\"Cart__List\">\r\n                {item.map((item) => (\r\n                    <CartItem key={item.id} {...item} updateQty={updateQty} />\r\n                ))}\r\n            </ul>\r\n            <h2>Grand Total: ${grandTotal}</h2>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Cart;\r\n","import React from 'react';\nimport Cart from './Cart';\nimport './App.css';\n\nconst items = [\n    { id: 1, name: 'Taco Seasoning', price: 2.25, qty: 2 },\n    { id: 2, name: 'Pinto Beans', price: 1.99, qty: 3 },\n    { id: 3, name: 'Sour Cream', price: 3.5, qty: 1 },\n];\n\nfunction App() {\n    return (\n        <div>\n            <Cart items={items} />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}